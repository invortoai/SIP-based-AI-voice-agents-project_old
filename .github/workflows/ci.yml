name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/**'
      - 'packages/**'
      - 'sdk/**'
      - 'tests/**'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
      - 'infra/terraform/**'
  pull_request:
    branches: [main]
    paths:
      - 'services/**'
      - 'packages/**'
      - 'sdk/**'
      - 'tests/**'
      - 'package*.json'
      - 'tsconfig*.json'
      - '.github/workflows/**'
      - 'infra/terraform/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write
  security-events: write

env:
  NODE_VERSION: '20'
  AWS_REGION: 'ap-south-1'
  ECR_REPOSITORY_PREFIX: 'invorto'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm run build

      - name: Run TypeScript type check
        run: npm run typecheck
      
      - name: Run linter
        run: npm run lint

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build

      - name: Verify Jest installation
        run: |
          ls -la node_modules/.bin/jest || echo "Jest binary not found"
          npx jest --version || echo "Jest version check failed"

      - name: Run tests
        env:
          NODE_ENV: test
          CI: true
        run: npm test
        timeout-minutes: 15
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Terraform validation and plan
  terraform-validate:
    name: Terraform validate/plan/outputs
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      - name: Configure AWS credentials (OIDC) for Terraform backend
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: invorto-ci-terraform
          aws-region: ${{ env.AWS_REGION }}

      - name: Select Terraform environment and backend key
        id: tf_env
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "env=production" >> "$GITHUB_OUTPUT"
            echo "state_key=prod/terraform.tfstate" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "env=staging" >> "$GITHUB_OUTPUT"
            echo "state_key=staging/terraform.tfstate" >> "$GITHUB_OUTPUT"
          else
            echo "env=dev" >> "$GITHUB_OUTPUT"
            echo "state_key=dev/terraform.tfstate" >> "$GITHUB_OUTPUT"
          fi
      - name: Terraform fmt (check)
        working-directory: infra/terraform
        run: terraform fmt -check -recursive
      - name: Terraform init
        working-directory: infra/terraform
        run: terraform init -input=false
      - name: Terraform validate
        working-directory: infra/terraform
        run: terraform validate
        continue-on-error: false
      - name: Terraform plan
        working-directory: infra/terraform
        run: |
          terraform plan -no-color -refresh=false -out=tfplan \
            -var="environment=${{ steps.tf_env.outputs.env }}" \
            -var="domain_name=api.invortoai.com" \
            -var="deepgram_api_key=${{ secrets.DEEPGRAM_API_KEY }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="elevenlabs_api_key=${{ secrets.ELEVENLABS_API_KEY }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="webhook_secret=${{ secrets.WEBHOOK_SECRET }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="redis_password=${{ secrets.REDIS_PASSWORD }}" \
            -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" \
            -var="github_connection_arn=${{ secrets.GITHUB_CONNECTION_ARN }}" \
            -var="jambonz_key_name=${{ secrets.JAMBONZ_KEY_NAME }}" \
            -var="enable_cost_alerts=false"
      - name: Terraform show plan (no secrets)
        working-directory: infra/terraform
        run: terraform show -no-color tfplan > plan.txt
      - name: Terraform outputs (json)
        working-directory: infra/terraform
        run: terraform output -json > outputs.json
      - name: Upload Terraform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-and-outputs
          path: |
            infra/terraform/plan.txt
            infra/terraform/outputs.json

 # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, terraform-validate]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [api, realtime, webhooks, workers, telephony]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: invorto-ci-build
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          REPO_NAME="${{ env.ECR_REPOSITORY_PREFIX }}-${{ matrix.service }}"
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "Creating ECR repository: $REPO_NAME"
            aws ecr create-repository \
              --repository-name "$REPO_NAME" \
              --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true \
              --image-tag-mutability MUTABLE
          else
            echo "ECR repository $REPO_NAME already exists"
          fi

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.service }}:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.service }}:latest \
            -f services/${{ matrix.service }}/Dockerfile \
            --build-arg NODE_ENV=production \
            --build-arg BUILD_TIMESTAMP=${{ github.run_id }}-${{ github.run_attempt }} \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.service }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.service }}:latest

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    # environment:
    #   name: staging
    #   url: https://staging.invortoai.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: invorto-ci-staging
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to ECS
        run: |
          # Determine cluster name based on branch
          CLUSTER_NAME="production-invorto-cluster"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            CLUSTER_NAME="staging-invorto-cluster"
          fi

          for service in api realtime webhooks workers telephony; do
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service invorto-${service} \
              --force-new-deployment \
              --region ${{ env.AWS_REGION }}
          done

      - name: Wait for deployment
        run: |
          CLUSTER_NAME="production-invorto-cluster"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            CLUSTER_NAME="staging-invorto-cluster"
          fi

          for service in api realtime webhooks workers telephony; do
            aws ecs wait services-stable \
              --cluster $CLUSTER_NAME \
              --services invorto-${service} \
              --region ${{ env.AWS_REGION }}
          done

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    # environment:
    #   name: production
    #   url: https://api.invortoai.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: invorto-ci-prod
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check production-api Health
        id: api-health-check
        run: |
          # Check if production-api is healthy
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster production-invorto-cluster \
            --services production-api \
            --query 'services[0]' \
            --output json \
            --region ${{ env.AWS_REGION }})

          RUNNING_COUNT=$(echo "$SERVICE_INFO" | jq -r '.runningCount // 0')
          DESIRED_COUNT=$(echo "$SERVICE_INFO" | jq -r '.desiredCount // 0')
          STATUS=$(echo "$SERVICE_INFO" | jq -r '.status // "UNKNOWN"')
          DEPLOYMENT_STATUS=$(echo "$SERVICE_INFO" | jq -r '.deployments[0].rolloutState // "UNKNOWN"')

          echo "API Service Status: $STATUS"
          echo "Running Count: $RUNNING_COUNT"
          echo "Desired Count: $DESIRED_COUNT"
          echo "Deployment Status: $DEPLOYMENT_STATUS"

          if [[ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" && "$STATUS" == "ACTIVE" && "$DEPLOYMENT_STATUS" == "COMPLETED" ]]; then
            echo "✅ production-api is healthy, skipping deployment"
            echo "skip_api=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ production-api needs deployment"
            echo "skip_api=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check production-realtime Health
        id: realtime-health-check
        run: |
          # Check if production-realtime is healthy
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster production-invorto-cluster \
            --services production-realtime \
            --query 'services[0]' \
            --output json \
            --region ${{ env.AWS_REGION }})

          RUNNING_COUNT=$(echo "$SERVICE_INFO" | jq -r '.runningCount // 0')
          DESIRED_COUNT=$(echo "$SERVICE_INFO" | jq -r '.desiredCount // 0')
          STATUS=$(echo "$SERVICE_INFO" | jq -r '.status // "UNKNOWN"')
          DEPLOYMENT_STATUS=$(echo "$SERVICE_INFO" | jq -r '.deployments[0].rolloutState // "UNKNOWN"')

          echo "Realtime Service Status: $STATUS"
          echo "Running Count: $RUNNING_COUNT"
          echo "Desired Count: $DESIRED_COUNT"
          echo "Deployment Status: $DEPLOYMENT_STATUS"

          if [[ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" && "$STATUS" == "ACTIVE" && "$DEPLOYMENT_STATUS" == "COMPLETED" ]]; then
            echo "✅ production-realtime is healthy, skipping deployment"
            echo "skip_realtime=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ production-realtime needs deployment"
            echo "skip_realtime=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Deploy to ECS with Blue/Green
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-prod.outputs.registry }}
        run: |
          # Function to update ECS service
          update_service() {
            local service=$1
            local cluster=$2
            local service_name="production-${service}"

            # Get current task definition
            TASK_DEF_ARN=$(aws ecs describe-services \
              --cluster ${cluster} \
              --services ${service_name} \
              --query 'services[0].taskDefinition' \
              --output text \
              --region ${{ env.AWS_REGION }})

            # Get the task definition
            TASK_DEFINITION=$(aws ecs describe-task-definition \
              --task-definition ${TASK_DEF_ARN} \
              --region ${{ env.AWS_REGION }} \
              --query 'taskDefinition' \
              --output json)

            # Update the image in the task definition
            NEW_TASK_DEF=$(echo "$TASK_DEFINITION" | \
              jq --arg IMAGE "${ECR_REGISTRY}/${ECR_REPOSITORY_PREFIX}-${service}:${{ github.sha }}" \
                  --arg SERVICE_NAME "$service" '
                .containerDefinitions[0].image = $IMAGE
                | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
                | .containerDefinitions[0].environment = (
                    ( .containerDefinitions[0].environment // [] )
                    | map(select(.name as $n | ($n != "PUBLIC_BASE_URL" and $n != "API_BASE_URL" and $n != "REALTIME_WS_URL" and $n != "WEBHOOK_BASE_URL" and $n != "TELEPHONY_WEBHOOK_BASE_URL" and $n != "SERVICE_NAME")))
                    + [
                      {name:"PUBLIC_BASE_URL", value:"https://api.invortoai.com"},
                      {name:"API_BASE_URL", value:"https://api.invortoai.com/v1"},
                      {name:"REALTIME_WS_URL", value:"wss://api.invortoai.com/realtime/voice"},
                      {name:"WEBHOOK_BASE_URL", value:"https://api.invortoai.com/webhooks"},
                      {name:"TELEPHONY_WEBHOOK_BASE_URL", value:"https://api.invortoai.com/telephony"},
                      {name:"SERVICE_NAME", value:$SERVICE_NAME}
                    ]
                  )
              ')

            # Register new task definition
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEF" \
              --region ${{ env.AWS_REGION }} \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            # Update service with new task definition
            aws ecs update-service \
              --cluster ${cluster} \
              --service ${service_name} \
              --task-definition ${NEW_TASK_DEF_ARN} \
              --force-new-deployment \
              --region ${{ env.AWS_REGION }}

            # Note: Service stabilization wait moved outside this function
            # to allow sequential deployment of all services
          }

          # Determine cluster name based on branch
          CLUSTER_NAME="production-invorto-cluster"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            CLUSTER_NAME="staging-invorto-cluster"
          fi

          # Deploy all services sequentially to avoid conflicts
          for service in api realtime webhooks workers telephony-ecs; do
            if [[ "$service" == "api" && "${{ steps.api-health-check.outputs.skip_api }}" == "true" ]]; then
              echo "⏭️  Skipping production-api deployment (already healthy)"
            elif [[ "$service" == "realtime" && "${{ steps.realtime-health-check.outputs.skip_realtime }}" == "true" ]]; then
              echo "⏭️  Skipping production-realtime deployment (already healthy)"
            else
              echo "🔄 Deploying ${service}..."
              update_service ${service} $CLUSTER_NAME
              echo "Waiting for ${service} to stabilize..."
              aws ecs wait services-stable \
                --cluster $CLUSTER_NAME \
                --services production-${service} \
                --region ${{ env.AWS_REGION }}
            fi
          done
      
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://api.invortoai.com/v1/health || exit 1
      
      - name: Check Slack webhook configured
        id: slack_gate
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            echo "has_slack=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_slack=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify deployment
        if: ${{ always() && steps.slack_gate.outputs.has_slack == 'true' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Production deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Production deployment *${{ job.status }}*\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - uses: actions/checkout@v4

      - name: Trivy filesystem scan (gated)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '0'

      - name: Check Code Scanning availability
        id: code-scanning-check
        run: |
          # Check if Code Scanning is available (requires GitHub Pro/Team/Enterprise)
          if curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/code-scanning/analyses" \
              | grep -q "Code scanning is not enabled"; then
            echo "Code Scanning not available - skipping SARIF uploads"
            echo "skip-upload=true" >> $GITHUB_OUTPUT
          else
            echo "Code Scanning available - proceeding with uploads"
            echo "skip-upload=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Trivy FS results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.code-scanning-check.outputs.skip-upload != 'true'
        continue-on-error: true
        with:
          sarif_file: 'trivy-fs.sarif'

      - name: tfsec (Terraform IaC scan)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false
          working_directory: infra/terraform
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'p/ci'
        env:
          SEMGREP_ENABLE_VERSION_CHECK: '0'

      - name: Check for Semgrep SARIF
        id: semgrep_gate
        shell: bash
        run: |
          if [ -f "semgrep.sarif" ]; then
            echo "has_sarif=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_sarif=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Semgrep SARIF (if generated)
        if: ${{ steps.semgrep_gate.outputs.has_sarif == 'true' && steps.code-scanning-check.outputs.skip-upload != 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: semgrep.sarif

      - name: SARIF Uploads Skipped
        if: steps.code-scanning-check.outputs.skip-upload == 'true'
        run: |
          echo "⚠️ SARIF uploads were skipped because Code Scanning is not available on free GitHub plans."
          echo ""
          echo "📋 To enable SARIF uploads to GitHub Security tab, you have these options:"
          echo "   1. Upgrade to GitHub Pro/Team/Enterprise plan"
          echo "   2. Use alternative security scanning tools:"
          echo "      - SonarCloud (free for open source)"
          echo "      - Snyk (free tier available)"
          echo "      - ESLint Security plugin"
          echo ""
          echo "✅ Your CI/CD pipeline will continue to work normally."
          echo "✅ Security scans (Trivy, Semgrep, npm audit) still ran successfully."

      - name: npm audit (non-blocking)
        run: npm audit --audit-level=moderate || true

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for k6 performance test files
        id: files_gate
        shell: bash
        run: |
          if ls -1 tests/performance/*.js >/dev/null 2>&1; then
            echo "has_files=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_files=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for k6 cloud token
        id: k6_gate
        shell: bash
        run: |
          if [ -n "${{ secrets.K6_CLOUD_TOKEN }}" ]; then
            echo "has_token=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_token=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run k6 performance tests
        if: ${{ steps.k6_gate.outputs.has_token == 'true' && steps.files_gate.outputs.has_files == 'true' }}
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/load-test.js
          flags: --out cloud
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          API_URL: https://staging.invortoai.com
